setup:
  - skip:
      features: headers
  - do:
      headers:
        Authorization: "Basic eF9wYWNrX3Jlc3RfdXNlcjp4LXBhY2stdGVzdC1wYXNzd29yZA==" # run as x_pack_rest_user, i.e. the test setup superuser
      ml.put_job:
        job_id: datafeeds-crud-1
        body:  >
          {
            "job_id":"datafeeds-crud-1",
            "analysis_config" : {
                "bucket_span": "1h",
                "detectors" :[{"function":"count"}],
                "summary_count_field_name": "doc_count"
            },
            "data_description" : {
                "format":"xcontent",
                "time_field":"time",
                "time_format":"epoch"
            }
          }

  - do:
      headers:
        Authorization: "Basic eF9wYWNrX3Jlc3RfdXNlcjp4LXBhY2stdGVzdC1wYXNzd29yZA==" # run as x_pack_rest_user, i.e. the test setup superuser
      ml.put_job:
        job_id: datafeeds-crud-2
        body:  >
          {
            "analysis_config" : {
                "bucket_span": "1h",
                "detectors" :[{"function":"count"}]
            },
            "data_description" : {
                "time_field":"time"
            }
          }

---
"Test get all datafeeds and stats given no datafeed exists":

  - do:
      ml.get_datafeeds:
        datafeed_id: "_all"
  - match: { count: 0 }
  - match: { datafeeds: [] }

  - do:
      ml.get_datafeed_stats:
        datafeed_id: "_all"
  - match: { count: 0 }
  - match: { datafeeds: [] }

---
"Test get datafeed with expression that does not match and allow_no_datafeeds":

  - do:
      ml.get_datafeeds:
        datafeed_id: "missing-*"
        allow_no_datafeeds: true
  - match: { count: 0 }
  - match: { datafeeds: [] }

---
"Test get datafeed with expression that does not match and not allow_no_datafeeds":

  - do:
      catch: missing
      ml.get_datafeeds:
        datafeed_id: "missing-*"
        allow_no_datafeeds: false

---
"Test put datafeed referring to missing job_id":
  - do:
      catch: /resource_not_found_exception/
      ml.put_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "job_id":"a-missing-job",
            "indexes":["index-foo"]
          }

---
"Test put datafeed with security headers in the body":
  - do:
      catch: /unknown field \[headers\]/
      ml.put_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "job_id":"datafeeds-crud-1",
            "indices":["index-foo"],
            "headers":{ "a_security_header" : "secret" }
          }

---
"Test put datafeed referring to existing job_id":
  - do:
      ml.put_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "job_id":"datafeeds-crud-1",
            "indexes":["index-foo"]
          }
  - match: { datafeed_id: "test-datafeed-1" }
  - match: { job_id: "datafeeds-crud-1" }
  - match: { indices: ["index-foo"] }
  - match: { scroll_size: 1000 }
  - is_true: query.match_all
  - match: { chunking_config: { mode: "auto" }}

---
"Test put datafeed whose id is already taken":
  - do:
      ml.put_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "job_id":"datafeeds-crud-1",
            "indexes":["index-foo"]
          }
  - match: { datafeed_id: "test-datafeed-1" }

  - do:
      catch: /resource_already_exists_exception/
      ml.put_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "job_id":"datafeeds-crud-2",
            "indexes":["index-foo"]
          }

---
"Test put datafeed with job_id that is already used by another datafeed":
  - do:
      ml.put_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "job_id":"datafeeds-crud-1",
            "indexes":["index-foo"]
          }
  - match: { datafeed_id: "test-datafeed-1" }

  - do:
      catch: /A datafeed \[test-datafeed-1\] already exists for job \[datafeeds-crud-1\]/
      ml.put_datafeed:
        datafeed_id: test-datafeed-2
        body:  >
          {
            "job_id":"datafeeds-crud-1",
            "indexes":["index-foo"]
          }

---
"Test put datafeed with invalid query":
  - do:
      catch: /parsing_exception/
      ml.put_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "job_id":"datafeeds-crud-1",
            "indexes":["index-foo"],
            "query":{"match_all_misspelled":{}}
          }

---
"Test update datafeed":
  - do:
      ml.put_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "job_id":"datafeeds-crud-1",
            "indexes":["index-foo"],
            "scroll_size": 2000,
            "frequency": "1m",
            "query_delay": "30s",
            "max_empty_searches": 42
          }
  - match: { max_empty_searches: 42 }

  - do:
      ml.update_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "indexes":["index-*"],
            "scroll_size": 10000,
            "frequency": "2m",
            "query_delay": "0s",
            "max_empty_searches": -1
          }
  - match: { datafeed_id: "test-datafeed-1" }
  - match: { job_id: "datafeeds-crud-1" }
  - match: { indices: ["index-*"] }
  - match: { scroll_size: 10000 }
  - match: { frequency: "2m" }
  - match: { query_delay: "0s" }
  - is_false: max_empty_searches

---
"Test update datafeed to point to different job":
  - skip:
      features: "warnings"

  - do:
      ml.put_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "job_id":"datafeeds-crud-1",
            "indexes":["index-foo"],
            "scroll_size": 2000
          }
  - match: { job_id: "datafeeds-crud-1" }

  - do:
      ml.update_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "job_id": "datafeeds-crud-1"
          }
  - match: { job_id: "datafeeds-crud-1" }

  - do:
      warnings:
        - The ability to update a datafeed's job_id is deprecated.
      ml.update_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "job_id": "datafeeds-crud-2"
          }
  - match: { datafeed_id: "test-datafeed-1" }
  - match: { job_id: "datafeeds-crud-2" }
  - match: { indices: ["index-foo"] }

---
"Test update datafeed with missing id":

  - do:
      catch: /resource_not_found_exception/
      ml.update_datafeed:
        datafeed_id: a-missing-datafeed
        body:  >
          {}

---
"Test update datafeed to point to missing job":
  - do:
      ml.put_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "job_id":"datafeeds-crud-1",
            "indexes":["index-foo"],
            "scroll_size": 2000
          }

  - do:
      catch: /resource_not_found_exception/
      ml.update_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "job_id": "update-datafeed-missing-job"
          }

---
"Test update datafeed to point to job already attached to another datafeed":
  - do:
      ml.put_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "job_id":"datafeeds-crud-1",
            "indexes":["index-foo"]
          }

  - do:
      ml.put_datafeed:
        datafeed_id: test-datafeed-2
        body:  >
          {
            "job_id":"datafeeds-crud-2",
            "indexes":["index-foo"]
          }

  - do:
      catch: /A datafeed \[test-datafeed-2\] already exists for job \[datafeeds-crud-2\]/
      ml.update_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "job_id": "datafeeds-crud-2"
          }

---
"Test delete datafeed with missing id":
  - do:
      catch: /resource_not_found_exception/
      ml.delete_datafeed:
        datafeed_id: a-missing-datafeed

---
"Test put datafeed with chunking_config":
  - do:
      ml.put_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "job_id":"datafeeds-crud-1",
            "indices":["index-foo"],
            "chunking_config": {"mode":"manual","time_span": "1h"}
          }
  - match: { datafeed_id: "test-datafeed-1" }
  - match: { chunking_config.mode: "manual" }
  - match: { chunking_config.time_span: "1h" }

---
"Test put datafeed with aggregations":
  - do:
      ml.put_datafeed:
        datafeed_id: test-datafeed-aggs-1
        body:  >
          {
            "job_id":"datafeeds-crud-1",
            "indices":["index-foo"],
            "aggs": {
              "histogram_buckets":{
                "date_histogram": {
                  "field": "@timestamp",
                  "fixed_interval": "5m",
                  "time_zone": "UTC",
                  "min_doc_count": 0
                },
                "aggs": {
                  "@timestamp": {
                     "max": {
                        "field": "@timestamp"
                     }
                  },
                  "bytes_in_avg": {
                    "avg": {
                       "field": "system.network.in.bytes"
                    }
                  },
                  "bytes_in_derivative": {
                    "derivative": {
                      "buckets_path": "bytes_in_avg"
                    }
                  },
                  "non_negative_bytes": {
                    "bucket_script": {
                      "buckets_path": {
                        "bytes": "bytes_in_derivative"
                      },
                      "script": "params.bytes > 0 ? params.bytes : null"
                    }
                  }
                }
              }
            },
            "max_empty_searches": -1
          }
  - do:
      ml.get_datafeeds:
        datafeed_id: test-datafeed-aggs-1
  - match: { datafeeds.0.datafeed_id: "test-datafeed-aggs-1" }
  - match: { datafeeds.0.aggregations.histogram_buckets.date_histogram.field: "@timestamp" }
  - match: { datafeeds.0.aggregations.histogram_buckets.aggs.@timestamp.max.field: "@timestamp" }
  - match: { datafeeds.0.aggregations.histogram_buckets.aggs.bytes_in_avg.avg.field: "system.network.in.bytes" }
  - match: { datafeeds.0.aggregations.histogram_buckets.aggs.non_negative_bytes.bucket_script.buckets_path.bytes: "bytes_in_derivative" }
  - is_false: max_empty_searches

---
"Test delete datafeed":
  - do:
      ml.put_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "job_id":"datafeeds-crud-1",
            "indexes":["index-foo"]
          }
  - match: { datafeed_id: "test-datafeed-1" }

  - do:
      ml.delete_datafeed:
        datafeed_id: test-datafeed-1
  - match: { acknowledged: true }

---
"Test force delete datafeed":
  - do:
      ml.put_datafeed:
        datafeed_id: test-datafeed-1
        body:  >
          {
            "job_id":"datafeeds-crud-1",
            "indexes":["index-foo"]
          }
  - match: { datafeed_id: "test-datafeed-1" }

  - do:
      ml.delete_datafeed:
        datafeed_id: test-datafeed-1
        force: true
  - match: { acknowledged: true }
