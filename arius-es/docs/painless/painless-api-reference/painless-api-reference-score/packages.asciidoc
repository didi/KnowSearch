// This file is auto-generated. Do not edit.


[role="exclude",id="painless-api-reference-score-org-elasticsearch-index-query"]
=== Score API for package org.elasticsearch.index.query
See the <<painless-api-reference-score, Score API>> for a high-level overview of all packages and classes.

[[painless-api-reference-score-VectorScriptDocValues]]
==== VectorScriptDocValues
* boolean {java11-javadoc}/java.base/java/util/Collection.html#add(java.lang.Object)[add](def)
* void {java11-javadoc}/java.base/java/util/List.html#add(int,java.lang.Object)[add](int, def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#addAll(java.util.Collection)[addAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/List.html#addAll(int,java.util.Collection)[addAll](int, Collection)
* boolean any(Predicate)
* Collection asCollection()
* List asList()
* void {java11-javadoc}/java.base/java/util/Collection.html#clear()[clear]()
* List collect(Function)
* def collect(Collection, Function)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#contains(java.lang.Object)[contains](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#containsAll(java.util.Collection)[containsAll](Collection)
* def each(Consumer)
* def eachWithIndex(ObjIntConsumer)
* boolean {java11-javadoc}/java.base/java/util/List.html#equals(java.lang.Object)[equals](Object)
* boolean every(Predicate)
* def find(Predicate)
* List findAll(Predicate)
* def findResult(Function)
* def findResult(def, Function)
* List findResults(Function)
* void {java11-javadoc}/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)[forEach](Consumer)
* def {java11-javadoc}/java.base/java/util/List.html#get(int)[get](int)
* Object getByPath(String)
* Object getByPath(String, Object)
* int getLength()
* Map groupBy(Function)
* int {java11-javadoc}/java.base/java/util/List.html#hashCode()[hashCode]()
* int {java11-javadoc}/java.base/java/util/List.html#indexOf(java.lang.Object)[indexOf](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#isEmpty()[isEmpty]()
* Iterator {java11-javadoc}/java.base/java/lang/Iterable.html#iterator()[iterator]()
* String join(String)
* int {java11-javadoc}/java.base/java/util/List.html#lastIndexOf(java.lang.Object)[lastIndexOf](def)
* ListIterator {java11-javadoc}/java.base/java/util/List.html#listIterator()[listIterator]()
* ListIterator {java11-javadoc}/java.base/java/util/List.html#listIterator(int)[listIterator](int)
* def {java11-javadoc}/java.base/java/util/List.html#remove(int)[remove](int)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeAll(java.util.Collection)[removeAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeIf(java.util.function.Predicate)[removeIf](Predicate)
* void {java11-javadoc}/java.base/java/util/List.html#replaceAll(java.util.function.UnaryOperator)[replaceAll](UnaryOperator)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#retainAll(java.util.Collection)[retainAll](Collection)
* def {java11-javadoc}/java.base/java/util/List.html#set(int,java.lang.Object)[set](int, def)
* int {java11-javadoc}/java.base/java/util/Collection.html#size()[size]()
* void {java11-javadoc}/java.base/java/util/List.html#sort(java.util.Comparator)[sort](Comparator)
* List split(Predicate)
* Spliterator {java11-javadoc}/java.base/java/util/Collection.html#spliterator()[spliterator]()
* Stream {java11-javadoc}/java.base/java/util/Collection.html#stream()[stream]()
* List {java11-javadoc}/java.base/java/util/List.html#subList(int,int)[subList](int, int)
* double sum()
* double sum(ToDoubleFunction)
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray()[toArray]()
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray(java.lang.Object%5B%5D)[toArray](def[])
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-score-VectorScriptDocValues-DenseVectorScriptDocValues]]
==== VectorScriptDocValues.DenseVectorScriptDocValues
* boolean {java11-javadoc}/java.base/java/util/Collection.html#add(java.lang.Object)[add](def)
* void {java11-javadoc}/java.base/java/util/List.html#add(int,java.lang.Object)[add](int, def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#addAll(java.util.Collection)[addAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/List.html#addAll(int,java.util.Collection)[addAll](int, Collection)
* boolean any(Predicate)
* Collection asCollection()
* List asList()
* void {java11-javadoc}/java.base/java/util/Collection.html#clear()[clear]()
* List collect(Function)
* def collect(Collection, Function)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#contains(java.lang.Object)[contains](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#containsAll(java.util.Collection)[containsAll](Collection)
* def each(Consumer)
* def eachWithIndex(ObjIntConsumer)
* boolean {java11-javadoc}/java.base/java/util/List.html#equals(java.lang.Object)[equals](Object)
* boolean every(Predicate)
* def find(Predicate)
* List findAll(Predicate)
* def findResult(Function)
* def findResult(def, Function)
* List findResults(Function)
* void {java11-javadoc}/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)[forEach](Consumer)
* def {java11-javadoc}/java.base/java/util/List.html#get(int)[get](int)
* Object getByPath(String)
* Object getByPath(String, Object)
* int getLength()
* Map groupBy(Function)
* int {java11-javadoc}/java.base/java/util/List.html#hashCode()[hashCode]()
* int {java11-javadoc}/java.base/java/util/List.html#indexOf(java.lang.Object)[indexOf](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#isEmpty()[isEmpty]()
* Iterator {java11-javadoc}/java.base/java/lang/Iterable.html#iterator()[iterator]()
* String join(String)
* int {java11-javadoc}/java.base/java/util/List.html#lastIndexOf(java.lang.Object)[lastIndexOf](def)
* ListIterator {java11-javadoc}/java.base/java/util/List.html#listIterator()[listIterator]()
* ListIterator {java11-javadoc}/java.base/java/util/List.html#listIterator(int)[listIterator](int)
* def {java11-javadoc}/java.base/java/util/List.html#remove(int)[remove](int)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeAll(java.util.Collection)[removeAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeIf(java.util.function.Predicate)[removeIf](Predicate)
* void {java11-javadoc}/java.base/java/util/List.html#replaceAll(java.util.function.UnaryOperator)[replaceAll](UnaryOperator)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#retainAll(java.util.Collection)[retainAll](Collection)
* def {java11-javadoc}/java.base/java/util/List.html#set(int,java.lang.Object)[set](int, def)
* int {java11-javadoc}/java.base/java/util/Collection.html#size()[size]()
* void {java11-javadoc}/java.base/java/util/List.html#sort(java.util.Comparator)[sort](Comparator)
* List split(Predicate)
* Spliterator {java11-javadoc}/java.base/java/util/Collection.html#spliterator()[spliterator]()
* Stream {java11-javadoc}/java.base/java/util/Collection.html#stream()[stream]()
* List {java11-javadoc}/java.base/java/util/List.html#subList(int,int)[subList](int, int)
* double sum()
* double sum(ToDoubleFunction)
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray()[toArray]()
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray(java.lang.Object%5B%5D)[toArray](def[])
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


[[painless-api-reference-score-VectorScriptDocValues-SparseVectorScriptDocValues]]
==== VectorScriptDocValues.SparseVectorScriptDocValues
* boolean {java11-javadoc}/java.base/java/util/Collection.html#add(java.lang.Object)[add](def)
* void {java11-javadoc}/java.base/java/util/List.html#add(int,java.lang.Object)[add](int, def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#addAll(java.util.Collection)[addAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/List.html#addAll(int,java.util.Collection)[addAll](int, Collection)
* boolean any(Predicate)
* Collection asCollection()
* List asList()
* void {java11-javadoc}/java.base/java/util/Collection.html#clear()[clear]()
* List collect(Function)
* def collect(Collection, Function)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#contains(java.lang.Object)[contains](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#containsAll(java.util.Collection)[containsAll](Collection)
* def each(Consumer)
* def eachWithIndex(ObjIntConsumer)
* boolean {java11-javadoc}/java.base/java/util/List.html#equals(java.lang.Object)[equals](Object)
* boolean every(Predicate)
* def find(Predicate)
* List findAll(Predicate)
* def findResult(Function)
* def findResult(def, Function)
* List findResults(Function)
* void {java11-javadoc}/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)[forEach](Consumer)
* def {java11-javadoc}/java.base/java/util/List.html#get(int)[get](int)
* Object getByPath(String)
* Object getByPath(String, Object)
* int getLength()
* Map groupBy(Function)
* int {java11-javadoc}/java.base/java/util/List.html#hashCode()[hashCode]()
* int {java11-javadoc}/java.base/java/util/List.html#indexOf(java.lang.Object)[indexOf](def)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#isEmpty()[isEmpty]()
* Iterator {java11-javadoc}/java.base/java/lang/Iterable.html#iterator()[iterator]()
* String join(String)
* int {java11-javadoc}/java.base/java/util/List.html#lastIndexOf(java.lang.Object)[lastIndexOf](def)
* ListIterator {java11-javadoc}/java.base/java/util/List.html#listIterator()[listIterator]()
* ListIterator {java11-javadoc}/java.base/java/util/List.html#listIterator(int)[listIterator](int)
* def {java11-javadoc}/java.base/java/util/List.html#remove(int)[remove](int)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeAll(java.util.Collection)[removeAll](Collection)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#removeIf(java.util.function.Predicate)[removeIf](Predicate)
* void {java11-javadoc}/java.base/java/util/List.html#replaceAll(java.util.function.UnaryOperator)[replaceAll](UnaryOperator)
* boolean {java11-javadoc}/java.base/java/util/Collection.html#retainAll(java.util.Collection)[retainAll](Collection)
* def {java11-javadoc}/java.base/java/util/List.html#set(int,java.lang.Object)[set](int, def)
* int {java11-javadoc}/java.base/java/util/Collection.html#size()[size]()
* void {java11-javadoc}/java.base/java/util/List.html#sort(java.util.Comparator)[sort](Comparator)
* List split(Predicate)
* Spliterator {java11-javadoc}/java.base/java/util/Collection.html#spliterator()[spliterator]()
* Stream {java11-javadoc}/java.base/java/util/Collection.html#stream()[stream]()
* List {java11-javadoc}/java.base/java/util/List.html#subList(int,int)[subList](int, int)
* double sum()
* double sum(ToDoubleFunction)
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray()[toArray]()
* def[] {java11-javadoc}/java.base/java/util/Collection.html#toArray(java.lang.Object%5B%5D)[toArray](def[])
* String {java11-javadoc}/java.base/java/lang/Object.html#toString()[toString]()


