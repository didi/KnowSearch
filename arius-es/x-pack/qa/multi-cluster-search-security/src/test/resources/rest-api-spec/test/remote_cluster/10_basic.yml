---
setup:
  - skip:
      features: headers

  - do:
      cluster.health:
        wait_for_status: yellow
  - do:
      security.put_user:
        username: "joe"
        body:  >
            {
              "password": "s3krit",
              "roles" : [ "x_cluster_role" ]
            }
  - do:
      security.put_role:
        name: "x_cluster_role"
        body:  >
            {
              "cluster": ["monitor"],
              "indices": [
                {
                  "names": ["single_doc_index", "secure_alias", "test_index", "aliased_test_index", "field_caps_index_1",
                  "field_caps_index_3"],
                  "privileges": ["read", "read_cross_cluster"]
                }
              ]
            }
---
"Index data and search on the remote cluster":

  - do:
        indices.create:
          index: single_doc_index
          body:
            settings:
              index:
                number_of_shards: 1
                number_of_replicas: 0
            mappings:
              properties:
                created_at:
                   type: date
                   format: "yyyy-MM-dd"

  - do:
        bulk:
          refresh: true
          body:
              - '{"index": {"_index": "single_doc_index"}}'
              - '{"f1": "remote_cluster", "sort_field": 1, "created_at" : "2016-01-01"}'

  - do:
        indices.create:
          index: field_caps_index_1
          body:
              mappings:
                properties:
                  text:
                    type:     text
                  keyword:
                    type:     keyword
                  number:
                    type:     double
                  geo:
                    type:     geo_point
                  object:
                    type: object
                    properties:
                      nested1 :
                        type : text
                        index: false
                      nested2:
                        type: float
                        doc_values: false
  - do:
        indices.create:
          index: field_caps_index_3
          body:
              mappings:
                properties:
                  text:
                    type:     text
                  keyword:
                    type:     keyword
                  number:
                    type:     long
                  geo:
                    type:     keyword
                  object:
                    type: object
                    properties:
                      nested1 :
                        type : long
                        index: false
                      nested2:
                        type: keyword
                        doc_values: false

  - do:
      indices.create:
        index: test_index
        body:
          settings:
            index:
              number_of_shards: 3
              number_of_replicas: 0
          aliases:
            aliased_test_index: # we use this alias in the multi cluster test to verify filtered aliases work
              filter:
                term:
                  filter_field : 1
  - do:
      indices.create:
        index: secured_via_alias
        body:
          settings:
            index:
              number_of_shards: 2
              number_of_replicas: 0
          aliases:
            secure_alias: {} # we use this alias in the multi cluster test to verify permissions via aliases work

  - do:
      bulk:
         refresh: true
         body:
           - '{"index": {"_index": "test_index"}}'
           - '{"f1": "remote_cluster", "filter_field": 0}'
           - '{"index": {"_index": "test_index"}}'
           - '{"f1": "remote_cluster", "filter_field": 1}'
           - '{"index": {"_index": "test_index"}}'
           - '{"f1": "remote_cluster", "filter_field": 0}'
           - '{"index": {"_index": "test_index"}}'
           - '{"f1": "remote_cluster", "filter_field": 1}'
           - '{"index": {"_index": "test_index"}}'
           - '{"f1": "remote_cluster", "filter_field": 0}'
           - '{"index": {"_index": "test_index"}}'
           - '{"f1": "remote_cluster", "filter_field": 0}'
           - '{"index": {"_index": "secured_via_alias"}}'
           - '{"f1": "remote_cluster", "secure": true}'


  - do:
      headers: { Authorization: "Basic am9lOnMza3JpdA==" }
      search:
        rest_total_hits_as_int: true
        index: test_index
        body:
          aggs:
            cluster:
              terms:
                field: f1.keyword

  - match: { _shards.total: 3 }
  - match: { hits.total: 6 }
  - length: { aggregations.cluster.buckets: 1 }
  - match: { aggregations.cluster.buckets.0.key: "remote_cluster" }
  - match: { aggregations.cluster.buckets.0.doc_count: 6 }

  - do:
      headers: { Authorization: "Basic am9lOnMza3JpdA==" }
      search:
        rest_total_hits_as_int: true
        index: aliased_test_index

  - match: { _shards.total: 3 }
  - match: { hits.total: 2 }
  - match: { hits.hits.0._source.filter_field: 1 }
  - match: { hits.hits.0._index: "test_index" }

  - do:
      headers: { Authorization: "Basic am9lOnMza3JpdA==" }
      search:
        rest_total_hits_as_int: true
        index: secure_alias

  - match: { _shards.total: 2 }
  - match: { hits.total: 1 }
  - is_true: hits.hits.0._source.secure
  - match: { hits.hits.0._index: "secured_via_alias" }

# The user is updated to remove its role mappings to show that we do not
#  need the user to be assigned to a role on the remote cluster and that the
#  roles sent with the user from the other cluster are used. The put user
#  request clears the cached reference to the user so we do not need to do
#  that manually
  - do:
      security.put_user:
        username: "joe"
        body:  >
            {
              "password": "s3krit",
              "roles" : [ ]
            }
  - match: { created: false }
