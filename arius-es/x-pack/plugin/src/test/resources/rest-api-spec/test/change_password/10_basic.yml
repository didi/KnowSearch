---
setup:
  - skip:
      features: headers
  - do:
      cluster.health:
        wait_for_status: yellow
  - do:
      security.put_user:
        username: "joe"
        body:  >
          {
            "password": "s3krit",
            "roles" : [ "superuser" ]
          }
  - do:
      security.put_role:
        name: "user"
        body:  >
          {
            "cluster": ["monitor"],
            "indices": [
              {
                "names": "*",
                "privileges": ["all"]
              }
            ]
          }
  - do:
      security.put_user:
        username: "unprivileged_user"
        body:  >
          {
            "password": "s3krit",
            "roles" : [ "user" ]
          }

---
teardown:
  - do:
      security.delete_user:
        username: "joe"
        ignore: 404
  - do:
      security.delete_role:
        name: "user"
        ignore: 404
  - do:
      security.delete_user:
        username: "unprivileged_user"
        ignore: 404

---
"Test changing users password":
  - skip:
      features: catch_unauthorized
  - do:
      headers:
        Authorization: "Basic am9lOnMza3JpdA=="
      cluster.health: {}
  - match: { timed_out: false }

# change password
  - do:
      security.change_password:
        username: "joe"
        body:  >
            {
              "password" : "s3krit2"
            }

# attempt to login with invalid credentials
  - do:
      catch: unauthorized
      headers:
        Authorization: "Basic am9lOnMza3JpdA=="
      cluster.health: {}

# login with new credentials
  - do:
      headers:
        Authorization: "Basic am9lOnMza3JpdDI="
      cluster.health: {}
  - match: { timed_out: false }

---
"Test user changing their own password":
  - skip:
      features: catch_unauthorized
# test that the role actually works
  - do:
      headers:
        Authorization: "Basic dW5wcml2aWxlZ2VkX3VzZXI6czNrcml0"
      cluster.health: {}
  - match: { timed_out: false }

# change password as the current user. the user role only grants the ability to change their own password
  - do:
      headers:
        Authorization: "Basic dW5wcml2aWxlZ2VkX3VzZXI6czNrcml0"
      security.change_password:
        body:  >
            {
              "password" : "s3krit2"
            }

# attempt to login with invalid credentials
  - do:
      catch: unauthorized
      headers:
        Authorization: "Basic dW5wcml2aWxlZ2VkX3VzZXI6czNrcml0"
      cluster.health: {}

# login with new credentials
  - do:
      headers:
        Authorization: "Basic dW5wcml2aWxlZ2VkX3VzZXI6czNrcml0Mg=="
      cluster.health: {}
  - match: { timed_out: false }

---
"Test unauthorized user changing anothers password":
# test that the role actually works
  - do:
      headers:
        Authorization: "Basic dW5wcml2aWxlZ2VkX3VzZXI6czNrcml0"
      cluster.health: {}
  - match: { timed_out: false }

# attempt to change another users password
  - do:
      headers:
        Authorization: "Basic dW5wcml2aWxlZ2VkX3VzZXI6czNrcml0"
      catch: forbidden
      security.change_password:
        username: "anotheruser"
        body:  >
            {
              "password" : "s3krit2"
            }
