package org.elasticsearch.dcdr.translog.replica.bulk;

import org.apache.logging.log4j.Logger;
import org.elasticsearch.ExceptionsHelper;
import org.elasticsearch.action.ActionListener;
import org.elasticsearch.action.support.ActionFilters;
import org.elasticsearch.action.support.replication.TransportWriteAction;
import org.elasticsearch.cluster.action.shard.ShardStateAction;
import org.elasticsearch.cluster.service.ClusterService;
import org.elasticsearch.common.bytes.BytesReference;
import org.elasticsearch.common.inject.Inject;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.dcdr.translog.replica.index.engine.AlreadyProcessedReplicaEngineException;
import org.elasticsearch.index.engine.Engine;
import org.elasticsearch.index.mapper.MapperException;
import org.elasticsearch.index.seqno.SeqNoStats;
import org.elasticsearch.index.seqno.SequenceNumbers;
import org.elasticsearch.index.shard.IndexShard;
import org.elasticsearch.index.shard.ShardId;
import org.elasticsearch.index.translog.Translog;
import org.elasticsearch.indices.IndicesService;
import org.elasticsearch.threadpool.ThreadPool;
import org.elasticsearch.transport.TransportService;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class TransportTranslogSyncAction
    extends TransportWriteAction<TranslogSyncRequest, TranslogSyncRequest, TranslogSyncResponse> {

    @Inject
    public TransportTranslogSyncAction(
        final Settings settings,
        final TransportService transportService,
        final ClusterService clusterService,
        final IndicesService indicesService,
        final ThreadPool threadPool,
        final ShardStateAction shardStateAction,
        final ActionFilters actionFilters) {
        super(
            settings,
            TranslogSyncAction.NAME,
            transportService,
            clusterService,
            indicesService,
            threadPool,
            shardStateAction,
            actionFilters,
            TranslogSyncRequest::new,
            TranslogSyncRequest::new,
            ThreadPool.Names.WRITE, false);
    }

    @Override
    protected void shardOperationOnPrimary(TranslogSyncRequest request, IndexShard primary,
                                           ActionListener<PrimaryResult<TranslogSyncRequest, TranslogSyncResponse>> listener) {
        if (logger.isTraceEnabled()) {
            logger.trace("index [{}] on the following primary shard {}", request.getOperations(), primary.routingEntry());
        }
        ActionListener.completeWith(listener, () -> shardOperationOnPrimary(request.shardId(), request.getHistoryUUID(),
            request.getOperations(), request.getMaxSeqNoOfUpdatesOrDeletes(), primary, logger));
    }

    public static Translog.Operation rewriteOperationWithPrimaryTerm(Translog.Operation operation, long primaryTerm) {
        final Translog.Operation operationWithPrimaryTerm;
        switch (operation.opType()) {
            case INDEX:
                final Translog.Index index = (Translog.Index) operation;
                operationWithPrimaryTerm = new Translog.Index(
                    index.type(),
                    index.id(),
                    index.seqNo(),
                    primaryTerm,
                    index.version(),
                    BytesReference.toBytes(index.source()),
                    index.routing(),
                    index.getAutoGeneratedIdTimestamp());
                break;
            case DELETE:
                final Translog.Delete delete = (Translog.Delete) operation;
                operationWithPrimaryTerm = new Translog.Delete(
                    delete.type(),
                    delete.id(),
                    delete.uid(),
                    delete.seqNo(),
                    primaryTerm,
                    delete.version());
                break;
            case NO_OP:
                final Translog.NoOp noOp = (Translog.NoOp) operation;
                operationWithPrimaryTerm = new Translog.NoOp(noOp.seqNo(), primaryTerm, noOp.reason());
                break;
            default:
                throw new IllegalStateException("unexpected operation type [" + operation.opType() + "]");
        }
        return operationWithPrimaryTerm;
    }

    // public for testing purposes only
    public static WritePrimaryResult<TranslogSyncRequest, TranslogSyncResponse> shardOperationOnPrimary(
        final ShardId shardId,
        final String historyUUID,
        final List<Translog.Operation> sourceOperations,
        long maxSeqNoOfUpdatesOrDeletes,
        final IndexShard primary,
        final Logger logger) throws IOException {
        if (historyUUID.equalsIgnoreCase(primary.getHistoryUUID()) == false) {
            throw new IllegalStateException("unexpected history uuid, expected [" + historyUUID +
                "], actual [" + primary.getHistoryUUID() + "], shard is likely restored from snapshot or force allocated");
        }

        assert maxSeqNoOfUpdatesOrDeletes >= SequenceNumbers.NO_OPS_PERFORMED : "invalid msu [" + maxSeqNoOfUpdatesOrDeletes + "]";
        if (maxSeqNoOfUpdatesOrDeletes == 0) {
            for (Translog.Operation sourceOp : sourceOperations) {
                if (sourceOp.seqNo() > maxSeqNoOfUpdatesOrDeletes) {
                    maxSeqNoOfUpdatesOrDeletes = sourceOp.seqNo();
                }
            }
        }
        primary.advanceMaxSeqNoOfUpdatesOrDeletes(maxSeqNoOfUpdatesOrDeletes);

        final List<Translog.Operation> appliedOperations = new ArrayList<>(sourceOperations.size());
        Translog.Location location = null;
        for (Translog.Operation sourceOp : sourceOperations) {
            final Translog.Operation targetOp = rewriteOperationWithPrimaryTerm(sourceOp, primary.getOperationPrimaryTerm());
            final Engine.Result result = primary.applyTranslogOperation(targetOp, Engine.Operation.Origin.PRIMARY);
            if (result.getResultType() == Engine.Result.Type.SUCCESS) {
                assert result.getSeqNo() == targetOp.seqNo();
                appliedOperations.add(targetOp);
                location = locationToSync(location, result.getTranslogLocation());
            } else {
                if (result.getResultType() == Engine.Result.Type.MAPPING_UPDATE_REQUIRED) {
                    throw new MapperException("mapping update required");
                } else if (result.getFailure() instanceof AlreadyProcessedReplicaEngineException) {
                    // The existing operations below the global checkpoint won't be replicated as they were processed
                    // in every replicas already. However, the existing operations above the global checkpoint will be
                    // replicated to replicas but with the existing primary term (not the current primary term) in order
                    // to guarantee the consistency between the primary and replicas, and between translog and Lucene index.
                    final AlreadyProcessedReplicaEngineException failure = (AlreadyProcessedReplicaEngineException) result.getFailure();
                    if (logger.isTraceEnabled()) {
                        logger.trace("operation [{}] was processed before on following primary shard {} with existing term {}",
                            targetOp, primary.routingEntry(), failure.getExistingPrimaryTerm());
                    }
                    assert failure.getSeqNo() == targetOp.seqNo() : targetOp.seqNo() + " != " + failure.getSeqNo();
//                    if (failure.getExistingPrimaryTerm().isPresent()) {
//                        appliedOperations.add(rewriteOperationWithPrimaryTerm(sourceOp, failure.getExistingPrimaryTerm().getAsLong()));
//                    } else if (targetOp.seqNo() > primary.getLastKnownGlobalCheckpoint()) {
//                        assert false :
//                            "can't find primary_term for existing op=" + targetOp + " gcp=" + primary.getLastKnownGlobalCheckpoint();
//                        throw new IllegalStateException("can't find primary_term for existing op=" + targetOp +
//                            " global_checkpoint=" + primary.getLastKnownGlobalCheckpoint(), failure);
//                    }
                    //  此处直接添加即可
                    appliedOperations.add(targetOp);
                } else {
                    assert false : "Only already-processed error should happen; op=[" + targetOp + "] error=[" + result.getFailure() + "]";
                    throw ExceptionsHelper.convertToElastic(result.getFailure());
                }
            }
        }
        final TranslogSyncRequest replicaRequest = new TranslogSyncRequest(
            shardId, historyUUID, appliedOperations, maxSeqNoOfUpdatesOrDeletes);
        return new WritePrimaryResult<>(replicaRequest, new TranslogSyncResponse(), location, null, primary, logger);
    }

    @Override
    protected WriteReplicaResult<TranslogSyncRequest> shardOperationOnReplica(
        final TranslogSyncRequest request, final IndexShard replica) throws Exception {
        if (logger.isTraceEnabled()) {
            logger.trace("index [{}] on the following replica shard {}", request.getOperations(), replica.routingEntry());
        }
        return shardOperationOnReplica(request, replica, logger);
    }

    // public for testing purposes only
    public static WriteReplicaResult<TranslogSyncRequest> shardOperationOnReplica(
        final TranslogSyncRequest request, final IndexShard replica, final Logger logger) throws IOException {
        assert replica.getMaxSeqNoOfUpdatesOrDeletes() >= request.getMaxSeqNoOfUpdatesOrDeletes() :
            "mus on replica [" + replica + "] < mus of request [" + request.getMaxSeqNoOfUpdatesOrDeletes() + "]";
        Translog.Location location = null;
        for (final Translog.Operation operation : request.getOperations()) {
            final Engine.Result result = replica.applyTranslogOperation(operation, Engine.Operation.Origin.REPLICA);
            if (result.getResultType() != Engine.Result.Type.SUCCESS) {
                assert false : "doc-level failure must not happen on replicas; op[" + operation + "] error[" + result.getFailure() + "]";
                throw ExceptionsHelper.convertToElastic(result.getFailure());
            }
            assert result.getSeqNo() == operation.seqNo();
            location = locationToSync(location, result.getTranslogLocation());
        }
        assert request.getOperations().size() == 0 || location != null;
        return new WriteReplicaResult<>(request, location, null, replica, logger);
    }

    @Override
    protected TranslogSyncResponse newResponseInstance(StreamInput in) throws IOException {
        return new TranslogSyncResponse(in);
    }

    @Override
    protected void adaptResponse(TranslogSyncResponse response, IndexShard indexShard) {
        adaptBulkShardOperationsResponse(response, indexShard);
    }

    public static void adaptBulkShardOperationsResponse(TranslogSyncResponse response, IndexShard indexShard) {
        final SeqNoStats seqNoStats = indexShard.seqNoStats();
        // return a fresh local checkpoint after the operations have been replicated for the shard follow task
        response.setLocalCheckpoint(seqNoStats.getLocalCheckpoint());
        response.setMaxSeqNo(seqNoStats.getMaxSeqNo());
    }

}
