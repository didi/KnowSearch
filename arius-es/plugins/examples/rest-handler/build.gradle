import org.elasticsearch.gradle.info.BuildParams

/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
apply plugin: 'elasticsearch.testclusters'
apply plugin: 'elasticsearch.esplugin'

esplugin {
  name 'rest-handler'
  description 'An example plugin showing how to register a REST handler'
  classname 'org.elasticsearch.example.resthandler.ExampleRestHandlerPlugin'
  licenseFile rootProject.file('licenses/APACHE-LICENSE-2.0.txt')
  noticeFile rootProject.file('NOTICE.txt')
}

// No unit tests in this example
test.enabled = false

task exampleFixture(type: org.elasticsearch.gradle.test.AntFixture) {
  dependsOn testClasses
  env 'CLASSPATH', "${-> project.sourceSets.test.runtimeClasspath.asPath}"
  executable = "${BuildParams.runtimeJavaHome}/bin/java"
  args 'org.elasticsearch.example.resthandler.ExampleFixture', baseDir, 'TEST'
}

integTest {
  dependsOn exampleFixture
  runner {
    nonInputProperties.systemProperty 'external.address', "${-> exampleFixture.addressAndPort}"
  }
}

testingConventions.naming {
  IT {
    baseClass 'org.elasticsearch.test.ESTestCase'
  }
}
