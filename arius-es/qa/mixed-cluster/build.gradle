/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.elasticsearch.gradle.Version
import org.elasticsearch.gradle.VersionProperties
import org.elasticsearch.gradle.info.BuildParams
import org.elasticsearch.gradle.testclusters.RestTestRunnerTask

apply plugin: 'elasticsearch.testclusters'
apply plugin: 'elasticsearch.standalone-test'

tasks.register("bwcTest") {
  description = 'Runs backwards compatibility tests.'
  group = 'verification'
}

configurations {
  restSpec
}

dependencies {
  restSpec project(':rest-api-spec')
}

processTestResources {
  from({ zipTree(configurations.restSpec.singleFile) })
  dependsOn configurations.restSpec
}

for (Version bwcVersion : bwcVersions.wireCompatible) {
  if (bwcVersion == VersionProperties.getElasticsearchVersion()) {
    // Not really a mixed cluster
    continue;
  }

  String baseName = "v${bwcVersion}"

  /* This project runs the core REST tests against a 4 node cluster where two of
     the nodes has a different minor.  */
  testClusters {
    "${baseName}" {
      versions = [bwcVersion.toString(), project.version]
      numberOfNodes = 4

      setting 'path.repo', "${buildDir}/cluster/shared/repo/${baseName}"
    }
  }

  tasks.register("${baseName}#mixedClusterTest", RestTestRunnerTask) {
    useCluster testClusters."${baseName}"
    mustRunAfter(precommit)
    doFirst {
      project.delete("${buildDir}/cluster/shared/repo/${baseName}")
      // Getting the endpoints causes a wait for the cluster
      println "Test cluster endpoints are: ${-> testClusters."${baseName}".allHttpSocketURI.join(",")}"
      println "Upgrading one node to create a mixed cluster"
      testClusters."${baseName}".nextNodeToNextVersion()
      // Getting the endpoints causes a wait for the cluster
      println "Upgrade complete, endpoints are: ${-> testClusters."${baseName}".allHttpSocketURI.join(",")}"
      println "Upgrading another node to create a mixed cluster"
      testClusters."${baseName}".nextNodeToNextVersion()

      nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}".allHttpSocketURI.join(",")}")
      nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}".getName()}")
    }
    systemProperty 'tests.path.repo', "${buildDir}/cluster/shared/repo/${baseName}"
    onlyIf { project.bwc_tests_enabled }
  }

  tasks.register("${baseName}#bwcTest") {
    dependsOn "${baseName}#mixedClusterTest"
  }

  tasks.bwcTest.dependsOn "${baseName}#bwcTest"
}

task bwcTestSnapshots {
  if (project.bwc_tests_enabled) {
    for (Version bwcVersion : bwcVersions.unreleasedWireCompatible) {
      if (bwcVersion != VersionProperties.getElasticsearchVersion()) {
        dependsOn "v${bwcVersion}#bwcTest"
      }
    }
  }
}

check.dependsOn(bwcTestSnapshots)

test.enabled = false
