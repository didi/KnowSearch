/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.elasticsearch.gradle.Version
import org.elasticsearch.gradle.info.BuildParams
import org.elasticsearch.gradle.testclusters.RestTestRunnerTask

apply plugin: 'elasticsearch.testclusters'
apply plugin: 'elasticsearch.standalone-test'

// This is a top level task which we will add dependencies to below.
// It is a single task that can be used to backcompat tests against all versions.
task bwcTest {
  description = 'Runs backwards compatibility tests.'
  group = 'verification'
}

configurations {
  restSpec
}

dependencies {
  restSpec project(':rest-api-spec')
}

processTestResources {
  from({ zipTree(configurations.restSpec.singleFile) }) {
    include 'rest-api-spec/api/**'
  }
  dependsOn configurations.restSpec
}

for (Version bwcVersion : bwcVersions.wireCompatible) {
  /*
   * The goal here is to:
   * <ul>
   *  <li>start three nodes on the old version
   *  <li>run tests with systemProperty 'tests.rest.suite', 'old_cluster'
   *  <li>upgrade one node
   *  <li>run tests with systemProperty 'tests.rest.suite', 'mixed_cluster'
   *  <li>upgrade one more node
   *  <li>run tests with systemProperty 'tests.rest.suite', 'mixed_cluster' again
   *  <li>updgrade the last node
   *  <li>run tests with systemProperty 'tests.rest.suite', 'upgraded_cluster'
   * </ul>
   */
  String baseName = "v${bwcVersion}"

  testClusters {
    "${baseName}" {
      versions = [bwcVersion.toString(), project.version]
      numberOfNodes = 3

      setting 'repositories.url.allowed_urls', 'http://snapshot.test*'
      setting 'path.repo', "${buildDir}/cluster/shared/repo/${baseName}"
      setting 'http.content_type.required', 'true'
    }
  }

  tasks.register("${baseName}#oldClusterTest", RestTestRunnerTask) {
    dependsOn processTestResources
    useCluster testClusters."${baseName}"
    mustRunAfter(precommit)
    doFirst {
      project.delete("${buildDir}/cluster/shared/repo/${baseName}")
    }
    systemProperty 'tests.rest.suite', 'old_cluster'
    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}".getName()}")
  }

  tasks.register("${baseName}#oneThirdUpgradedTest", RestTestRunnerTask) {
    dependsOn "${baseName}#oldClusterTest"
    useCluster testClusters."${baseName}"
    doFirst {
      testClusters."${baseName}".nextNodeToNextVersion()
    }
    systemProperty 'tests.rest.suite', 'mixed_cluster'
    systemProperty 'tests.upgrade_from_version', project.version.replace("-SNAPSHOT", "")
    systemProperty 'tests.first_round', 'true'
    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}".getName()}")
  }

  tasks.register("${baseName}#twoThirdsUpgradedTest", RestTestRunnerTask) {
    dependsOn "${baseName}#oneThirdUpgradedTest"
    useCluster testClusters."${baseName}"
    doFirst {
      testClusters."${baseName}".nextNodeToNextVersion()
    }
    systemProperty 'tests.rest.suite', 'mixed_cluster'
    systemProperty 'tests.upgrade_from_version', project.version.replace("-SNAPSHOT", "")
    systemProperty 'tests.first_round', 'false'
    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}".getName()}")
  }

  tasks.register("${baseName}#upgradedClusterTest", RestTestRunnerTask) {
    dependsOn "${baseName}#twoThirdsUpgradedTest"
    doFirst {
      testClusters."${baseName}".nextNodeToNextVersion()
    }
    useCluster testClusters."${baseName}"
    systemProperty 'tests.rest.suite', 'upgraded_cluster'

    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}".getName()}")
  }

  if (project.bwc_tests_enabled) {
    bwcTest.dependsOn(
      tasks.register("${baseName}#bwcTest") {
        dependsOn tasks.named("${baseName}#upgradedClusterTest")
      }
    )
  }
}

test.enabled = false // no unit tests for rolling upgrades, only the rest integration test

// basic integ tests includes testing bwc against the most recent version
task bwcTestSnapshots {
  if (project.bwc_tests_enabled) {
    for (final def version : bwcVersions.unreleasedWireCompatible) {
      dependsOn "v${version}#bwcTest"
    }
  }
}

check.dependsOn(bwcTestSnapshots)

test.enabled = false
