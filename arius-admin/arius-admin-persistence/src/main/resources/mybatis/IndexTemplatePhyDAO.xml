<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.didichuxing.datachannel.arius.admin.persistence.mysql.template.IndexTemplatePhyDAO">
    <resultMap id="BaseResultMap"
               type="com.didichuxing.datachannel.arius.admin.common.bean.po.template.IndexTemplatePhyPO">
        <result column="id" jdbcType="BIGINT" property="id"/>
        <result column="logic_id" jdbcType="INTEGER" property="logicId"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="expression" jdbcType="VARCHAR" property="expression"/>
        <result column="cluster" jdbcType="VARCHAR" property="cluster"/>
        <result column="rack" jdbcType="VARCHAR" property="rack"/>
        <result column="shard" jdbcType="INTEGER" property="shard"/>
        <result column="shard_routing" jdbcType="INTEGER" property="shardRouting"/>
        <result column="version" jdbcType="INTEGER" property="version"/>
        <result column="role" jdbcType="TINYINT" property="role"/>
        <result column="status" jdbcType="TINYINT" property="status"/>
        <result column="config" jdbcType="VARCHAR" property="config"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="region_id" jdbcType="INTEGER" property="regionId"/>
    </resultMap>

    <sql id="Base_Column_List">
        id, logic_id, `name`, expression, cluster, rack, shard, shard_routing, version, role, status, config, create_time, update_time, region_id
    </sql>

    <select id="listByCondition"
            parameterType="com.didichuxing.datachannel.arius.admin.common.bean.po.template.IndexTemplatePhyPO"
            resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_template_physical_info
        where status > 0
        <if test="id != null">and id = #{id}</if>
        <if test="logicId != null">and logic_id = #{logicId}</if>
        <if test="name != null">and `name` = #{name}</if>
        <if test="cluster != null">and cluster = #{cluster}</if>
        <if test="role != null">and role = #{role}</if>
        <if test="regionId != null">and region_id = #{regionId}</if>
        order by id desc
    </select>

    <insert id="insert"
            parameterType="com.didichuxing.datachannel.arius.admin.common.bean.po.template.IndexTemplatePhyPO"
            useGeneratedKeys="true"
            keyColumn="id" keyProperty="id">
        insert into index_template_physical_info
        (logic_id, `name`, expression, cluster, rack, shard, shard_routing, version, role, config, region_id)
        values
        (#{logicId}, #{name}, #{expression}, #{cluster},
         #{rack}, #{shard}, #{shardRouting}, #{version}, #{role}, #{config}, #{regionId})
    </insert>

    <select id="getById" parameterType="long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_template_physical_info
        where id = #{physicalId} and status > 0
    </select>

    <select id="getNormalAndDeletingById" parameterType="long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_template_physical_info
        where id = #{physicalId} and (status = 1 or status = -1)
    </select>


    <select id="listAll" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_template_physical_info
        where status > 0
    </select>

    <select id="listByLogicId" parameterType="int" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_template_physical_info
        where logic_id = #{logicId} and status > 0
    </select>

    <select id="listByName" parameterType="string" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_template_physical_info
        where `name` = #{name} and status > 0
    </select>

    <select id="listByLogicIds" parameterType="list" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_template_physical_info
        where status > 0 and
        logic_id in
        <foreach collection="list" item="id" open="(" separator="," close=")">#{id}</foreach>
    </select>

    <select id="listByIds" parameterType="list" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_template_physical_info
        where status > 0 and
        id in
        <foreach collection="list" item="id" open="(" separator="," close=")">#{id}</foreach>
    </select>


    <update id="update"
            parameterType="com.didichuxing.datachannel.arius.admin.common.bean.po.template.IndexTemplatePhyPO">
        update index_template_physical_info
        <trim prefix="set" prefixOverrides=",">
            <if test="name != null">,`name` = #{name}</if>
            <if test="expression != null">,expression = #{expression}</if>
            <if test="rack != null">,rack = #{rack}</if>
            <if test="shard != null">,shard = #{shard}</if>
            <if test="shardRouting != null">,shard_routing = #{shardRouting}</if>
            <if test="version != null">,version = #{version}</if>
            <if test="role != null">,role = #{role}</if>
            <if test="config != null">,config = #{config}</if>
            <if test="regionId != null">,region_id = #{regionId}</if>
            <if test="cluster != null and cluster != '' ">,cluster = #{cluster}</if>
        </trim>
        where id = #{id} and status > 0
    </update>

    <update id="updateStatus" parameterType="map">
        update index_template_physical_info
        set status = #{status}
        where id = #{physicalId}
    </update>
	<update id="updateShardNumByLogicId">
      update index_template_physical_info
        set shard = #{shardNum}
        where logic_id = #{logicId}
	</update>
	
	<select id="getByLogicIdAndStatus" parameterType="map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_template_physical_info
        where logic_id = #{logicId} and status = #{status}
    </select>
    <select id="getTemplateByLogicIdAndRole" parameterType="map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_template_physical_info where status > 0 and logic_id = #{logicId} and role = #{role}
    </select>

    <select id="getByClusterAndStatus" parameterType="map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_template_physical_info
        where status = #{status} and cluster = #{cluster}
    </select>

    <select id="getByClusterAndNameAndStatus" parameterType="map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_template_physical_info
        where status = #{status} and cluster = #{cluster} and `name` = #{name}
    </select>

    <select id="listByClusterAndStatus" parameterType="map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_template_physical_info
        where status = #{status} and cluster = #{cluster}
    </select>

    <select id="listByMatchClusterAndStatus" parameterType="map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_template_physical_info
        where status = #{status} and cluster LIKE CONCAT(#{cluster},'%')
    </select>

    <select id="getByClusterAndName" parameterType="map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_template_physical_info
        where `name` = #{name} and cluster = #{cluster}  and status > 0
    </select>
    <select id="countListByLogicId" resultMap="BaseResultMap">
        select id, logic_id
        from index_template_physical_info
        where `status` > 0
    </select>

    <delete id="deleteDirtyByClusterAndName" parameterType="map">
        delete from index_template_physical_info
        where `name` = #{name} and cluster = #{cluster} and status &lt; 0
    </delete>

    <select id="listByRegionId" parameterType="int" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from index_template_physical_info
        where region_id = #{regionId} and status > 0
    </select>

</mapper>